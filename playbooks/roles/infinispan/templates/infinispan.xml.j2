<infinispan
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="urn:infinispan:config:13.0 https://infinispan.org/schemas/infinispan-config-13.0.xsd
                            urn:infinispan:server:13.0 https://infinispan.org/schemas/infinispan-server-13.0.xsd"
      xmlns="urn:infinispan:config:13.0"
      xmlns:server="urn:infinispan:server:13.0">

   <jgroups>
      <stack name="cluster-tcp" extends="tcp">
         <TCPPING
             initial_hosts="{% if group_names|length > 0 %}{{ groups[group_names[0]] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | join('[7800],') }}[7800]{% endif %}"
             stack.combine="REPLACE"
             stack.position="MPING"
             /> <!-- TODO: change initial_hosts into dynamic address -->
      </stack>
   </jgroups>

   <cache-container name="default" statistics="true">
      <transport cluster="${infinispan.cluster.name:cluster}" stack="${infinispan.cluster.stack:cluster-tcp}" node-name="${infinispan.node.name:}"/>
      <security>
         <authorization/>
      </security>
      
{% if infinispan_replicated_cache_name is defined %}
{% if infinispan_replicated_cache_configuration_enable is defined and infinispan_replicated_cache_configuration_enable is sameas true %}
      <replicated-cache-configuration name="{{ infinispan_replicated_cache_name }}" mode="SYNC" start="EAGER" statistics="true"/>
{% endif %}
{% if infinispan_replicated_cache_realms_enable is defined and infinispan_replicated_cache_realms_enable is sameas true %}
      <replicated-cache name="realms" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% if infinispan_replicated_cache_work_enable is defined and infinispan_replicated_cache_work_enable is sameas true %}
      <replicated-cache name="work" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% if infinispan_replicated_cache_sessions_enable is defined and infinispan_replicated_cache_sessions_enable is sameas true %}
      <replicated-cache name="sessions" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% if infinispan_replicated_cache_authentication_sessions_enable is defined and infinispan_replicated_cache_authentication_sessions_enable is sameas true %}
      <replicated-cache name="authenticationSessions" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% if infinispan_replicated_cache_client_sessions_enable is defined and infinispan_replicated_cache_client_sessions_enable is sameas true %}
      <replicated-cache name="clientSessions" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% if infinispan_replicated_cache_offline_sessions_enable is defined and infinispan_replicated_cache_offline_sessions_enable is sameas true %}
      <replicated-cache name="offlineSessions" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% if infinispan_replicated_cache_offline_client_sessions_enable is defined and infinispan_replicated_cache_offline_client_sessions_enable is sameas true %}
      <replicated-cache name="offlineClientSessions" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% if infinispan_replicated_cache_action_tokens_enable is defined and infinispan_replicated_cache_action_tokens_enable is sameas true %}
      <replicated-cache name="actionTokens" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% if infinispan_replicated_cache_login_failures_enable is defined and infinispan_replicated_cache_login_failures_enable is sameas true %}
      <replicated-cache name="loginFailures" configuration="{{ infinispan_replicated_cache_name }}"/>
{% endif %}
{% endif %}
   </cache-container>

   <server xmlns="urn:infinispan:server:13.0">
      <interfaces>
         <interface name="public">
            <inet-address value="${infinispan.bind.address:0.0.0.0}"/>
         </interface>
      </interfaces>

      <socket-bindings default-interface="public" port-offset="${infinispan.socket.binding.port-offset:0}">
         <socket-binding name="default" port="${infinispan.bind.port:11222}"/>
         <socket-binding name="memcached" port="11221"/>
      </socket-bindings>

      <security>
         <credential-stores>
            <credential-store name="credentials" path="credentials.pfx">
               <clear-text-credential clear-text="secret"/>
            </credential-store>
         </credential-stores>
         <security-realms>
            <security-realm name="default">
               <!-- Uncomment to enable TLS on the realm -->
               <!-- server-identities>
                  <ssl>
                     <keystore path="application.keystore"
                               password="password" alias="server"
                               generate-self-signed-certificate-host="localhost"/>
                  </ssl>
               </server-identities-->
               <properties-realm groups-attribute="Roles">
                  <user-properties path="users.properties"/>
                  <group-properties path="groups.properties"/>
               </properties-realm>
            </security-realm>
         </security-realms>
      </security>

      <endpoints socket-binding="default" security-realm="default" />
   </server>
</infinispan>